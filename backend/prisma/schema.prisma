generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
  COORDINATOR
}

enum Status {
  ACTIVE
  INACTIVE
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  password       String
  firstName      String
  lastName       String
  phone          String?
  role           Role
  profilePicture String?
  status         Status   @default(ACTIVE)

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  student     Student?
  teacher     Teacher?
  coordinator Coordinator?

  tickets        Ticket[]
  posts          Post[]
  ticketMessages TicketMessage[]
  comments       Comment[]
}

model Student {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  courseEnrollments  Enrollment[]
  tickets            Ticket[]
  academicHistory    AcademicHistory?
  documents          Document[]
  ActivitySubmission ActivitySubmission[]
}

model Teacher {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  courseTeachings Course[]
  tickets         Ticket[]
}

model Coordinator {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  coursesManaged Course[]
  tickets        Ticket[]
}

model Course {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  coordinatorId Int
  coordinator   Coordinator @relation(fields: [coordinatorId], references: [id])

  enrollments Enrollment[]
  activities  Activity[]
  posts       Post[]
  Teacher     Teacher?     @relation(fields: [teacherId], references: [id])
  teacherId   Int?
}

model Enrollment {
  id        Int     @id @default(autoincrement())
  studentId Int
  courseId  Int
  student   Student @relation(fields: [studentId], references: [id])
  course    Course  @relation(fields: [courseId], references: [id])

  grade     Float?
  frequency Float?
  status    String?

  @@unique([studentId, courseId])
}

model Activity {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  dueDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  courseId Int
  course   Course @relation(fields: [courseId], references: [id])

  submissions ActivitySubmission[]
}

model ActivitySubmission {
  id         Int      @id @default(autoincrement())
  activityId Int
  studentId  Int
  activity   Activity @relation(fields: [activityId], references: [id])
  student    Student  @relation(fields: [studentId], references: [id])

  submissionDate DateTime @default(now())
  grade          Float?
  feedback       String?

  @@unique([activityId, studentId])
}

model AcademicHistory {
  id        Int     @id @default(autoincrement())
  studentId Int     @unique
  student   Student @relation(fields: [studentId], references: [id])

  approved       Boolean
  totalGrade     Float
  frequency      Float
  graduationDate DateTime?
}

model Document {
  id          Int     @id @default(autoincrement())
  type        String
  description String?
  fileUrl     String
  studentId   Int

  student Student @relation(fields: [studentId], references: [id])
}

model Ticket {
  id          Int            @id @default(autoincrement())
  title       String
  description String
  status      TicketStatus   @default(OPEN)
  priority    TicketPriority @default(LOW)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  closedAt    DateTime?

  userId Int
  user   User @relation(fields: [userId], references: [id])

  teacherId Int?
  teacher   Teacher? @relation(fields: [teacherId], references: [id])

  coordinatorId Int?
  coordinator   Coordinator? @relation(fields: [coordinatorId], references: [id])

  studentId Int?
  student   Student? @relation(fields: [studentId], references: [id])

  messages TicketMessage[]
}

model TicketMessage {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  ticketId Int
  ticket   Ticket @relation(fields: [ticketId], references: [id])

  senderId Int
  sender   User @relation(fields: [senderId], references: [id])
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId Int?
  course   Course? @relation(fields: [courseId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])

  comments Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId Int
  post   Post @relation(fields: [postId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])
}
