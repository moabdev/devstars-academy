generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  TEACHER
  COORDINATOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum TicketState {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum TicketLevel {
  LOW
  MEDIUM
  HIGH
}

enum SubmissionState {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  role      UserRole
  photo     String?
  status    UserStatus @default(ACTIVE)
  deletedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student     Student?
  teacher     Teacher?
  coordinator Coordinator?

  tickets  Ticket[]
  posts    Post[]
  messages Message[]
  comments Comment[]
  reviews  Submission[] @relation("Reviews")

  @@index([email, status])
}

model Student {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id])
  deletedAt DateTime?

  enrollments Enrollment[]
  tickets     Ticket[]
  history     History?
  docs        Doc[]
  submissions Submission[]

  @@index([userId])
}

model Teacher {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id])
  deletedAt DateTime?

  courses Course[]
  tickets Ticket[]

  @@index([userId])
}

model Coordinator {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id])
  deletedAt DateTime?

  courses Course[]
  tickets Ticket[]

  @@index([userId])
}

model Course {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  coordinatorId Int
  coordinator   Coordinator @relation(fields: [coordinatorId], references: [id])

  teacherId Int?
  teacher   Teacher? @relation(fields: [teacherId], references: [id])

  enrollments Enrollment[]
  activities  Activity[]
  posts       Post[]

  @@index([coordinatorId, teacherId])
}

model Enrollment {
  id        Int     @id @default(autoincrement())
  studentId Int
  courseId  Int
  student   Student @relation(fields: [studentId], references: [id])
  course    Course  @relation(fields: [courseId], references: [id])

  grade     Float?
  frequency Float?
  status    String?

  @@unique([studentId, courseId])
  @@index([studentId, courseId])
}

model Activity {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  dueDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  courseId Int
  course   Course @relation(fields: [courseId], references: [id])

  submissions Submission[]

  @@index([courseId, dueDate])
}

model Submission {
  id         Int      @id @default(autoincrement())
  activityId Int
  studentId  Int
  activity   Activity @relation(fields: [activityId], references: [id])
  student    Student  @relation(fields: [studentId], references: [id])

  submissionDate DateTime        @default(now())
  grade          Float?
  feedback       String?
  status         SubmissionState @default(PENDING)

  reviewedAt DateTime?
  reviewerId Int?
  reviewer   User?     @relation("Reviews", fields: [reviewerId], references: [id])

  @@unique([activityId, studentId])
  @@index([studentId, status])
}

model History {
  id        Int     @id @default(autoincrement())
  studentId Int     @unique
  student   Student @relation(fields: [studentId], references: [id])

  approved       Boolean
  totalGrade     Float
  frequency      Float
  graduationDate DateTime?
}

model Doc {
  id          Int       @id @default(autoincrement())
  type        String
  description String?
  fileUrl     String
  studentId   Int
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?

  student Student @relation(fields: [studentId], references: [id])

  @@index([studentId, type])
}

model Ticket {
  id          Int         @id @default(autoincrement())
  title       String
  description String
  state       TicketState @default(OPEN)
  level       TicketLevel @default(LOW)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  closedAt    DateTime?
  deletedAt   DateTime?

  userId Int
  user   User @relation(fields: [userId], references: [id])

  teacherId Int?
  teacher   Teacher? @relation(fields: [teacherId], references: [id])

  coordinatorId Int?
  coordinator   Coordinator? @relation(fields: [coordinatorId], references: [id])

  studentId Int?
  student   Student? @relation(fields: [studentId], references: [id])

  messages Message[]

  @@index([userId, state, level])
}

model Message {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  ticketId Int
  ticket   Ticket @relation(fields: [ticketId], references: [id])

  senderId Int
  sender   User @relation(fields: [senderId], references: [id])

  @@index([ticketId, senderId])
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  courseId Int?
  course   Course? @relation(fields: [courseId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])

  comments Comment[]

  @@index([courseId, userId])
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  postId Int
  post   Post @relation(fields: [postId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@index([postId, userId])
}
